{"ast":null,"code":"var _jsxFileName = \"/app/src/pages/ForumTopic.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Connect to Socket.IO\n\nfunction ForumTopic() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the topic ID from the URL\n  const [topic, setTopic] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [newPost, setNewPost] = useState('');\n  useEffect(() => {\n    // Fetch the topic and its posts\n    fetch(`http://localhost:5000/api/topics/${id}`).then(response => response.json()).then(data => {\n      setTopic(data);\n      setPosts(data.Posts);\n    });\n\n    // Listen for new posts via Socket.IO\n    socket.on('newPost', post => {\n      setPosts(prevPosts => [post, ...prevPosts]);\n    });\n    return () => {\n      socket.off('newPost');\n    };\n  }, [id]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('You must be logged in to post.');\n      return;\n    }\n\n    // Post the new comment to the server\n    const response = await fetch(`http://localhost:5000/api/topics/${id}/posts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        content: newPost\n      })\n    });\n    if (response.ok) {\n      setNewPost(''); // Clear the input after submission\n    } else {\n      alert('Failed to post the message');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forum-topic\",\n    children: topic && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: topic.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: topic.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"posts-list\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Posted by: \", post.User ? post.User.username : 'Anonymous']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 33\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"new-post-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Write your post...\",\n          value: newPost,\n          onChange: e => setNewPost(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(ForumTopic, \"UOB7eh4jT0gHwc2QSrAzG2mAeDQ=\", false, function () {\n  return [useParams];\n});\n_c = ForumTopic;\nexport default ForumTopic;\nvar _c;\n$RefreshReg$(_c, \"ForumTopic\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ForumTopic","_s","id","topic","setTopic","posts","setPosts","newPost","setNewPost","fetch","then","response","json","data","Posts","on","post","prevPosts","off","handleSubmit","e","preventDefault","token","localStorage","getItem","alert","method","headers","body","JSON","stringify","content","ok","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","description","map","User","username","onSubmit","placeholder","value","onChange","target","required","type","_c","$RefreshReg$"],"sources":["/app/src/pages/ForumTopic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\n\nconst socket = io('http://localhost:5000');  // Connect to Socket.IO\n\nfunction ForumTopic() {\n    const { id } = useParams();  // Get the topic ID from the URL\n    const [topic, setTopic] = useState(null);\n    const [posts, setPosts] = useState([]);\n    const [newPost, setNewPost] = useState('');\n\n    useEffect(() => {\n        // Fetch the topic and its posts\n        fetch(`http://localhost:5000/api/topics/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                setTopic(data);\n                setPosts(data.Posts);\n            });\n\n        // Listen for new posts via Socket.IO\n        socket.on('newPost', post => {\n            setPosts(prevPosts => [post, ...prevPosts]);\n        });\n\n        return () => {\n            socket.off('newPost');\n        };\n    }, [id]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const token = localStorage.getItem('token');\n        if (!token) {\n            alert('You must be logged in to post.');\n            return;\n        }\n\n        // Post the new comment to the server\n        const response = await fetch(`http://localhost:5000/api/topics/${id}/posts`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({ content: newPost })\n        });\n\n        if (response.ok) {\n            setNewPost('');  // Clear the input after submission\n        } else {\n            alert('Failed to post the message');\n        }\n    };\n\n    return (\n        <div className=\"forum-topic\">\n            {topic && (\n                <>\n                    <h2>{topic.title}</h2>\n                    <p>{topic.description}</p>\n\n                    <ul className=\"posts-list\">\n                        {posts.map(post => (\n                            <li key={post.id}>\n                                <p>{post.content}</p>\n                                <small>Posted by: {post.User ? post.User.username : 'Anonymous'}</small>\n                            </li>\n                        ))}\n                    </ul>\n\n                    <form onSubmit={handleSubmit} className=\"new-post-form\">\n                        <textarea\n                            placeholder=\"Write your post...\"\n                            value={newPost}\n                            onChange={(e) => setNewPost(e.target.value)}\n                            required\n                        />\n                        <button type=\"submit\">Post</button>\n                    </form>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default ForumTopic;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}