{"ast":null,"code":"var _jsxFileName = \"/app/src/pages/ForumTopic.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport '../css/ForumTopic.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction ForumTopic() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the topic ID from the URL\n  const [topic, setTopic] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [newPost, setNewPost] = useState('');\n  const [replyPost, setReplyPost] = useState(null);\n  const [newReply, setNewReply] = useState('');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchTopicData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/topics/${id}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch topic data');\n        }\n        const data = await response.json();\n        setTopic(data);\n        setPosts(data.Posts || []); // Ensure we're getting posts for this topic only\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching topic:', error);\n        setLoading(false);\n      }\n    };\n    fetchTopicData();\n\n    // Listen for new posts and replies via Socket.IO\n    socket.on('newPost', post => {\n      if (post.topicId === parseInt(id, 10)) {\n        // Ensure the new post belongs to the current topic\n        // If it's a reply, update the specific post with new reply\n        if (post.parentId) {\n          setPosts(prevPosts => prevPosts.map(p => p.id === post.parentId ? {\n            ...p,\n            Replies: p.Replies ? [...p.Replies, post] : [post]\n          } : p));\n        } else {\n          // Otherwise, treat it as a new post (only if it's not a reply)\n          setPosts(prevPosts => [post, ...prevPosts]);\n        }\n      }\n    });\n    return () => {\n      socket.off('newPost');\n    };\n  }, [id]);\n\n  // Function to submit a new post\n  const handleSubmitPost = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('You must be logged in to post.');\n      return;\n    }\n    console.log('Token found:', token); // Vérifie que le token est bien récupéré\n\n    const response = await fetch(`http://localhost:5000/api/topics/${id}/posts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        content: newPost\n      })\n    });\n    if (response.ok) {\n      setNewPost(''); // Clear the input after submission\n    } else {\n      console.error('Error posting:', await response.json());\n    }\n  };\n\n  // Function to submit a reply to a post\n  const handleReplySubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('You must be logged in to reply.');\n      return;\n    }\n    const response = await fetch(`http://localhost:5000/api/topics/${id}/posts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        content: newReply,\n        parentId: replyPost\n      }) // Add parentId for the reply\n    });\n    if (response.ok) {\n      setReplyPost(null); // Clear the reply state\n      setNewReply(''); // Clear the reply input\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forum-topic\",\n    children: topic && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topic-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: topic.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: topic.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"posts-list\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"post-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Posted by: \", post.User ? post.User.username : 'Anonymous', \" at \", new Date(post.createdAt).toLocaleString(), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"reply-button\",\n              onClick: () => setReplyPost(post.id),\n              children: \"Reply\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 33\n          }, this), post.Replies && post.Replies.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"replies-list\",\n            children: post.Replies.map(reply => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"reply-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: reply.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                children: [\"Replied by: \", reply.User ? reply.User.username : 'Anonymous', \" at \", new Date(reply.createdAt).toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 49\n              }, this)]\n            }, reply.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 37\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), replyPost && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Reply to Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-reply\",\n          onClick: () => setReplyPost(null),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }, this), replyPost ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleReplySubmit,\n        className: \"new-reply-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Write your reply...\",\n          value: newReply,\n          onChange: e => setNewReply(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmitPost,\n        className: \"new-post-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Write your post...\",\n          value: newPost,\n          onChange: e => setNewPost(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_s(ForumTopic, \"fWhkpns+mihxCne+cie/P62prhg=\", false, function () {\n  return [useParams];\n});\n_c = ForumTopic;\nexport default ForumTopic;\nvar _c;\n$RefreshReg$(_c, \"ForumTopic\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ForumTopic","_s","id","topic","setTopic","posts","setPosts","newPost","setNewPost","replyPost","setReplyPost","newReply","setNewReply","loading","setLoading","fetchTopicData","response","fetch","ok","Error","data","json","Posts","error","console","on","post","topicId","parseInt","parentId","prevPosts","map","p","Replies","off","handleSubmitPost","e","preventDefault","token","localStorage","getItem","alert","log","method","headers","body","JSON","stringify","content","handleReplySubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","description","User","username","Date","createdAt","toLocaleString","onClick","length","reply","onSubmit","placeholder","value","onChange","target","required","type","_c","$RefreshReg$"],"sources":["/app/src/pages/ForumTopic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport '../css/ForumTopic.css';\n\nconst socket = io('http://localhost:5000');\n\nfunction ForumTopic() {\n    const { id } = useParams();  // Get the topic ID from the URL\n    const [topic, setTopic] = useState(null);\n    const [posts, setPosts] = useState([]);\n    const [newPost, setNewPost] = useState('');\n    const [replyPost, setReplyPost] = useState(null);\n    const [newReply, setNewReply] = useState('');\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchTopicData = async () => {\n            try {\n                const response = await fetch(`http://localhost:5000/api/topics/${id}`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch topic data');\n                }\n                const data = await response.json();\n                setTopic(data);\n                setPosts(data.Posts || []);  // Ensure we're getting posts for this topic only\n                setLoading(false);\n            } catch (error) {\n                console.error('Error fetching topic:', error);\n                setLoading(false);\n            }\n        };\n    \n        fetchTopicData();\n    \n        // Listen for new posts and replies via Socket.IO\n        socket.on('newPost', (post) => {\n            if (post.topicId === parseInt(id, 10)) {  // Ensure the new post belongs to the current topic\n                // If it's a reply, update the specific post with new reply\n                if (post.parentId) {\n                    setPosts((prevPosts) =>\n                        prevPosts.map((p) =>\n                            p.id === post.parentId\n                                ? {\n                                      ...p,\n                                      Replies: p.Replies\n                                          ? [...p.Replies, post]\n                                          : [post],\n                                  }\n                                : p\n                        )\n                    );\n                } else {\n                    // Otherwise, treat it as a new post (only if it's not a reply)\n                    setPosts((prevPosts) => [post, ...prevPosts]);\n                }\n            }\n        });\n    \n        return () => {\n            socket.off('newPost');\n        };\n    }, [id]);\n    \n\n    // Function to submit a new post\n    const handleSubmitPost = async (e) => {\n        e.preventDefault();\n        const token = localStorage.getItem('token');\n        if (!token) {\n            alert('You must be logged in to post.');\n            return;\n        }\n    \n        console.log('Token found:', token);  // Vérifie que le token est bien récupéré\n    \n        const response = await fetch(`http://localhost:5000/api/topics/${id}/posts`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({ content: newPost })\n        });\n    \n        if (response.ok) {\n            setNewPost('');  // Clear the input after submission\n        } else {\n            console.error('Error posting:', await response.json());\n        }\n    };\n\n    // Function to submit a reply to a post\n    const handleReplySubmit = async (e) => {\n        e.preventDefault();\n        const token = localStorage.getItem('token');\n        if (!token) {\n            alert('You must be logged in to reply.');\n            return;\n        }\n\n        const response = await fetch(`http://localhost:5000/api/topics/${id}/posts`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({ content: newReply, parentId: replyPost })  // Add parentId for the reply\n        });\n\n        if (response.ok) {\n            setReplyPost(null);  // Clear the reply state\n            setNewReply('');  // Clear the reply input\n        }\n    };\n\n    if (loading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"forum-topic\">\n            {topic && (\n                <>\n                    <div className=\"topic-header\">\n                        <h2>{topic.title}</h2>\n                        <p>{topic.description}</p>\n                    </div>\n    \n                    <ul className=\"posts-list\">\n                        {posts.map((post) => (\n                            <li key={post.id} className=\"post-item\">\n                                <p>{post.content}</p>\n                                <small>\n                                    Posted by: {post.User ? post.User.username : 'Anonymous'} at {new Date(post.createdAt).toLocaleString()}\n                                    <button className=\"reply-button\" onClick={() => setReplyPost(post.id)}>\n                                        Reply\n                                    </button>\n                                </small>\n    \n                                {/* Display replies */}\n                                {post.Replies && post.Replies.length > 0 && (\n                                    <ul className=\"replies-list\">\n                                        {post.Replies.map((reply) => (\n                                            <li key={reply.id} className=\"reply-item\">\n                                                <p>{reply.content}</p>\n                                                <small>\n                                                    Replied by: {reply.User ? reply.User.username : 'Anonymous'} at {new Date(reply.createdAt).toLocaleString()}\n                                                </small>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                )}\n                            </li>\n                        ))}\n                    </ul>\n    \n                    {replyPost && (\n                        <div className=\"reply-header\">\n                            <h4>Reply to Post</h4>\n                            <button className=\"close-reply\" onClick={() => setReplyPost(null)}>X</button>\n                        </div>\n                    )}\n    \n                    {replyPost ? (\n                        <form onSubmit={handleReplySubmit} className=\"new-reply-form\">\n                            <textarea\n                                placeholder=\"Write your reply...\"\n                                value={newReply}\n                                onChange={(e) => setNewReply(e.target.value)}\n                                required\n                            />\n                            <button type=\"submit\">Reply</button>\n                        </form>\n                    ) : (\n                        <form onSubmit={handleSubmitPost} className=\"new-post-form\">\n                            <textarea\n                                placeholder=\"Write your post...\"\n                                value={newPost}\n                                onChange={(e) => setNewPost(e.target.value)}\n                                required\n                            />\n                            <button type=\"submit\">Post</button>\n                        </form>\n                    )}\n                </>\n            )}\n        </div>\n    );\n    \n}\n\nexport default ForumTopic;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}