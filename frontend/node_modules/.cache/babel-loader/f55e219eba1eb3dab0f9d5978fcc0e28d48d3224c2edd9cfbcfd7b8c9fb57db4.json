{"ast":null,"code":"// Get a topic with its posts\nexports.getTopicWithPosts = async (req, res) => {\n  try {\n    const topic = await Topic.findByPk(req.params.id, {\n      include: [{\n        model: Post,\n        include: [{\n          model: User,\n          attributes: ['username']\n        }]\n      }] // Include the post and user\n    });\n    if (!topic) {\n      return res.status(404).json({\n        message: 'Topic not found'\n      });\n    }\n    res.status(200).json(topic);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n};\n\n// Create a new post in a topic\nexports.createPost = async (req, res) => {\n  try {\n    const newPost = await Post.create({\n      content: req.body.content,\n      topicId: req.params.id,\n      userId: req.user.id // User must be logged in\n    });\n    res.status(201).json(newPost);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n};","map":{"version":3,"names":["exports","getTopicWithPosts","req","res","topic","Topic","findByPk","params","id","include","model","Post","User","attributes","status","json","message","error","console","createPost","newPost","create","content","body","topicId","userId","user"],"sources":["/app/src/pages/ForumTopic.js"],"sourcesContent":["// Get a topic with its posts\nexports.getTopicWithPosts = async (req, res) => {\n    try {\n        const topic = await Topic.findByPk(req.params.id, {\n            include: [{ model: Post, include: [{ model: User, attributes: ['username'] }] }]  // Include the post and user\n        });\n\n        if (!topic) {\n            return res.status(404).json({ message: 'Topic not found' });\n        }\n\n        res.status(200).json(topic);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server error' });\n    }\n};\n\n// Create a new post in a topic\nexports.createPost = async (req, res) => {\n    try {\n        const newPost = await Post.create({\n            content: req.body.content,\n            topicId: req.params.id,\n            userId: req.user.id,  // User must be logged in\n        });\n\n        res.status(201).json(newPost);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server error' });\n    }\n};"],"mappings":"AAAA;AACAA,OAAO,CAACC,iBAAiB,GAAG,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC5C,IAAI;IACA,MAAMC,KAAK,GAAG,MAAMC,KAAK,CAACC,QAAQ,CAACJ,GAAG,CAACK,MAAM,CAACC,EAAE,EAAE;MAC9CC,OAAO,EAAE,CAAC;QAAEC,KAAK,EAAEC,IAAI;QAAEF,OAAO,EAAE,CAAC;UAAEC,KAAK,EAAEE,IAAI;UAAEC,UAAU,EAAE,CAAC,UAAU;QAAE,CAAC;MAAE,CAAC,CAAC,CAAE;IACtF,CAAC,CAAC;IAEF,IAAI,CAACT,KAAK,EAAE;MACR,OAAOD,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAkB,CAAC,CAAC;IAC/D;IAEAb,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACX,KAAK,CAAC;EAC/B,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBd,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EACrD;AACJ,CAAC;;AAED;AACAhB,OAAO,CAACmB,UAAU,GAAG,OAAOjB,GAAG,EAAEC,GAAG,KAAK;EACrC,IAAI;IACA,MAAMiB,OAAO,GAAG,MAAMT,IAAI,CAACU,MAAM,CAAC;MAC9BC,OAAO,EAAEpB,GAAG,CAACqB,IAAI,CAACD,OAAO;MACzBE,OAAO,EAAEtB,GAAG,CAACK,MAAM,CAACC,EAAE;MACtBiB,MAAM,EAAEvB,GAAG,CAACwB,IAAI,CAAClB,EAAE,CAAG;IAC1B,CAAC,CAAC;IAEFL,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACK,OAAO,CAAC;EACjC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBd,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EACrD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}