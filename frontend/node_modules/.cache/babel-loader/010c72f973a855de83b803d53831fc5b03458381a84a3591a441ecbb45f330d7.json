{"ast":null,"code":"var _jsxFileName = \"/app/src/pages/ForumTopic.js\",\n  _s = $RefreshSig$();\n// ForumTopic.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Connect to Socket.IO\n\nfunction ForumTopic() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the topic ID from the URL\n  const [topic, setTopic] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [newPost, setNewPost] = useState('');\n  useEffect(() => {\n    // Fetch the topic and its posts\n    fetch(`http://localhost:5000/api/topics/${id}/posts`).then(response => response.json()).then(data => {\n      setPosts(data); // Set the posts data\n    });\n\n    // Listen for new posts via Socket.IO\n    socket.on('newPost', post => {\n      setPosts(prevPosts => [post, ...prevPosts]);\n    });\n    return () => {\n      socket.off('newPost');\n    };\n  }, [id]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('You must be logged in to post.');\n      return;\n    }\n\n    // Post the new comment to the server\n    const response = await fetch(`http://localhost:5000/api/topics/${id}/posts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        content: newPost\n      })\n    });\n    if (response.ok) {\n      const post = await response.json();\n      setPosts([post, ...posts]); // Add new post to the top of the list\n      setNewPost(''); // Clear the input after submission\n    } else {\n      alert('Failed to post the message');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forum-topic\",\n    children: topic && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: topic.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: topic.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"posts-list\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"post-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Post\\xE9 par: \", post.User ? post.User.username : 'Anonymous', \" \\xE0 \", new Date(post.createdAt).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 33\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"new-post-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Write your post...\",\n          value: newPost,\n          onChange: e => setNewPost(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(ForumTopic, \"UOB7eh4jT0gHwc2QSrAzG2mAeDQ=\", false, function () {\n  return [useParams];\n});\n_c = ForumTopic;\nexport default ForumTopic;\nvar _c;\n$RefreshReg$(_c, \"ForumTopic\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ForumTopic","_s","id","topic","setTopic","posts","setPosts","newPost","setNewPost","fetch","then","response","json","data","on","post","prevPosts","off","handleSubmit","e","preventDefault","token","localStorage","getItem","alert","method","headers","body","JSON","stringify","content","ok","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","description","map","User","username","Date","createdAt","toLocaleString","onSubmit","placeholder","value","onChange","target","required","type","_c","$RefreshReg$"],"sources":["/app/src/pages/ForumTopic.js"],"sourcesContent":["// ForumTopic.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\n\nconst socket = io('http://localhost:5000');  // Connect to Socket.IO\n\nfunction ForumTopic() {\n    const { id } = useParams();  // Get the topic ID from the URL\n    const [topic, setTopic] = useState(null);\n    const [posts, setPosts] = useState([]);\n    const [newPost, setNewPost] = useState('');\n\n    useEffect(() => {\n        // Fetch the topic and its posts\n        fetch(`http://localhost:5000/api/topics/${id}/posts`)\n            .then(response => response.json())\n            .then(data => {\n                setPosts(data);  // Set the posts data\n            });\n\n        // Listen for new posts via Socket.IO\n        socket.on('newPost', post => {\n            setPosts(prevPosts => [post, ...prevPosts]);\n        });\n\n        return () => {\n            socket.off('newPost');\n        };\n    }, [id]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const token = localStorage.getItem('token');\n        if (!token) {\n            alert('You must be logged in to post.');\n            return;\n        }\n\n        // Post the new comment to the server\n        const response = await fetch(`http://localhost:5000/api/topics/${id}/posts`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({ content: newPost })\n        });\n\n        if (response.ok) {\n            const post = await response.json();\n            setPosts([post, ...posts]);  // Add new post to the top of the list\n            setNewPost('');  // Clear the input after submission\n        } else {\n            alert('Failed to post the message');\n        }\n    };\n\n    return (\n        <div className=\"forum-topic\">\n            {topic && (\n                <>\n                    <h2>{topic.title}</h2>\n                    <p>{topic.description}</p>\n\n                    <ul className=\"posts-list\">\n                        {posts.map(post => (\n                            <li key={post.id} className=\"post-item\">\n                                <p>{post.content}</p>\n                                <small>Posté par: {post.User ? post.User.username : 'Anonymous'} à {new Date(post.createdAt).toLocaleString()}</small>\n                            </li>\n                        ))}\n                    </ul>\n\n                    <form onSubmit={handleSubmit} className=\"new-post-form\">\n                        <textarea\n                            placeholder=\"Write your post...\"\n                            value={newPost}\n                            onChange={(e) => setNewPost(e.target.value)}\n                            required\n                        />\n                        <button type=\"submit\">Post</button>\n                    </form>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default ForumTopic;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}